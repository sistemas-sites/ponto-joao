<!DOCTYPE html>
 <html lang="pt-br">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Sistema de Ponto</title>
     <style>
         body {
             font-family: 'Roboto', sans-serif;
             background-color: #f0f0f0;
             margin: 0;
             padding: 20px;
             text-align: center;
         }
 
         h1 {
             color: #333;
             margin-bottom: 20px;
         }
 
         .container {
             max-width: 800px;
             margin: 0 auto;
             padding: 20px;
             background-color: #fff;
             border-radius: 8px;
             box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
         }
 
         .form-group {
             margin-bottom: 15px;
         }
 
         label {
             display: block;
             margin-bottom: 5px;
             font-weight: bold;
         }
 
         input[type="text"], input[type="email"], input[type="password"], input[type="date"], input[type="time"], select {
             width: 100%;
             padding: 10px;
             border: 1px solid #ccc;
             border-radius: 5px;
         }
 
         button {
             padding: 10px 20px;
             font-size: 16px;
             border: none;
             border-radius: 5px;
             cursor: pointer;
             margin-top: 10px;
             transition: background-color 0.3s;
         }
 
         .btn-primary {
             background-color: #007BFF;
             color: white;
         }
 
         .btn-success {
             background-color: #28A745;
             color: white;
         }
 
         .btn-secondary {
             background-color: #6C757D;
             color: white;
         }
 
         button:hover {
             opacity: 0.9;
         }
 
         .message {
             display: none;
             margin: 20px 0;
             padding: 10px;
             border-radius: 5px;
         }
 
         .message.success {
             background-color: #28A745;
             color: white;
         }
 
         .message.error {
             background-color: #DC3545;
             color: white;
         }
         table {
            width: 100%;
            border-collapse: collapse; 
          }
        
          table, th, td {
            border: 1px solid black; 
          }
        
          th, td {
            padding: 10px;
            text-align: left;            
          }
          .saldo-positivo {
            color: blue; 
        }
        
        .saldo-negativo {
            color: red;  
        }
 
         @media (max-width: 768px) {
             button {
                 width: 100%;
             }
         }
         
         .ed-srec{
            background-color: #DC3545;
            color: #f0f0f0;
         }
         .lista{            
            text-align: left;
            width: 60%;
            margin: auto;
         }
     </style>
 </head>
 <body>
     <div class="container">
         <h1>Bata Seu Ponto</h1>
         <div id="messageBox" class="message"></div> <!-- Caixa de mensagens -->
 
         <!-- Campo para escolher o funcionário -->
         <form id="pontoForm">
             <div class="form-group">
                 <label for="funcionario_id">Selecione Seu Nome:</label>
                 <select name="funcionario_id" id="funcionario_id" disabled style="color: black; font-weight: bold;">
                    <% funcionarios.forEach(funcionario => { %>
                        <option value="<%= funcionario.codigo %>" 
                            <%= funcionario.codigo == funcionarioLogado ? 'selected' : '' %>>
                            <%= funcionario.nome %>
                        </option>
                    <% }) %>
                </select>
             </div>
 
             <div class="buttons">
                 <button id="logoutButton" type="button" class="btn-primary" onclick="baterPonto('entrada')">Bater Entrada</button>
                 <button id="logoutButton" type="button" class="btn-secondary" onclick="baterPonto('saida-almoco')">Saída para Almoço</button>
                 <button id="logoutButton" type="button" class="btn-secondary" onclick="baterPonto('volta-almoco')">Volta do Almoço</button>
                 <button id="logoutButton" type="button" class="btn-primary" onclick="baterPonto('saida')">Bater Saída</button>
             </div>
         </form><br><br>
         <div id="loginDiv">
            <button class="bold" type="button" onclick="verificar()">Acesso Restrito</button><br><br>            
            <div id="conteudoProteted" style="display:none;">
            <form id="loginForm">
                <div class="form-group">
                    <label for="senha_login">Senha:</label>
                    <input type="password" id="senha_login" placeholder="Digite sua senha" required>
                </div>
                <button type="button" onclick="verificarSenha()">Entrar</button>
            </form>
            </div>
        </div>
        <div id="conteudoProtegido" style="display:none;">
            <button class="ed-srec" onclick="fecharSessao()">Fechar Sessão</button>
         <h2>Cadastrar Novo Funcionário</h2>
         <form id="cadastroFuncionarioForm">
             <div class="form-group">
                 <input type="text" name="nome" placeholder="Nome" required>
             </div>
             <div class="form-group">
                 <input type="email" name="email" placeholder="Email" required>
             </div>
             <div class="form-group">
                 <input type="password" name="senha" placeholder="Senha" required>
             </div>
             <div class="form-group">
                 <input type="text" name="codigo" placeholder="codigo" required>
             </div>
             <div class="form-group">
                 <input type="text" name="carga" placeholder="carga" required>
             </div>
             <button type="button" class="btn-success" onclick="cadastrarFuncionario()">Cadastrar</button>
         </form>
         
         <h2>Gerar Relatório de Horas Trabalhadas</h2>
<form id="relatorioForm">
    <div class="form-group">
        <label for="funcionario_id">Funcionário:</label>
        <select name="funcionario_id" id="funcionario_id_relatorio">
            <% funcionarios.forEach(funcionario => { %>
                <option value="<%= funcionario.codigo %>"><%= funcionario.nome %></option>
            <% }) %>
        </select>
    </div>
    <div class="form-group">
        <label for="data_inicio">Data Início:</label>
        <input type="date" id="data_inicio" required>
    </div>
    <div class="form-group">
        <label for="data_fim">Data Fim:</label>
        <input type="date" id="data_fim" required>
    </div>
    <button type="button" class="btn-primary" onclick="gerarRelatorio()">Gerar Relatório</button>
    <button onclick="exportarRelatorioParaCSV()">Exportar para CSV</button>

    <div type="button" class="btn-secondary" onclick="exportarRelatorio()"></div>
</form>

<h3>Relatório</h3>
<div id="saldoTotalDisplay"></div>
<table id="tabelaRelatorio">
    <thead>
        <tr>
            <th>Data</th>
            <th>Entrada</th>
            <th>Saída Almoço</th>
            <th>Volta Almoço</th>
            <th>Saída</th>
            <th>Horas</th>
            <th>Saldos</th>
        </tr>
    </thead>
    <tbody>
        <!-- Linhas do relatório serão adicionadas aqui dinamicamente -->
    </tbody>
</table>

         <h2>Editar Registro de Ponto</h2>
         <form id="editarPontoForm">
             <div class="form-group">
                 <label for="funcionario_id_editar">Funcionário:</label>
                 <select name="funcionario_id" id="funcionario_id_editar">
                     <% funcionarios.forEach(funcionario => { %>
                         <option value="<%= funcionario.codigo %>"><%= funcionario.nome %></option>
                     <% }) %>
                 </select>
             </div>
 
             <!-- <div class="form-group">
                 <label for="data_editar">Data:</label>
                 <input type="date" id="data_editar" required>
             </div> -->
             <div class="form-group">
                <label for="data_editar">Data:</label>
                <input type="date" id="data_editar" required onchange="buscarRegistroParaEditar()">
            </div>
            
 
             <div class="form-group">
                 <label for="entrada_editar">Entrada:</label>
                 <input type="time" id="entrada_editar">
             </div>
 
             <div class="form-group">
                 <label for="saida_almoco_editar">Saída Almoço:</label>
                 <input type="time" id="saida_almoco_editar">
             </div>
 
             <div class="form-group">
                 <label for="volta_almoco_editar">Volta Almoço:</label>
                 <input type="time" id="volta_almoco_editar">
             </div>
 
             <div class="form-group">
                 <label for="saida_editar">Saída:</label>
                 <input type="time" id="saida_editar">
             </div>
 
             <button type="button" class="btn-success" onclick="editarPonto()">Salvar Alterações</button>
         </form>
     
     <form id="deleteForm" method="POST" action="/deletar-funcionario">
        <label for="funcionario_id">Selecione o funcionário para excluir:</label>
        <select name="funcionario_id" id="delete">
            <% funcionarios.forEach(funcionario => { %>
                <option value="<%= funcionario.codigo %>"><%= funcionario.nome %></option>
            <% }) %>
        </select>
        <button type="submit">Excluir Funcionário</button>
    </form>
    <div class="lista"
    <h1>Funcionários Listados</h1>
    <table border="1">
        <thead>
            <tr>
                <th>Código</th>
                <th>Nome</th>
            </tr>
        </thead>
        <tbody>
            <% funcionarios.forEach(funcionario => { %>
                <tr>
                    <td><%= funcionario.codigo %></td>
                    <td><%= funcionario.nome %></td>
                </tr>
            <% }); %>
        </tbody>
    </table> 
    </div>
</div>
    
     <script>
         function showMessage(message, type = 'success') {
             const messageBox = document.getElementById('messageBox');
             messageBox.textContent = message;
             messageBox.className = `message ${type}`;
             messageBox.style.display = 'block';
 
             setTimeout(() => {
                 messageBox.style.display = 'none';
             }, 3000);
         }
 
         function baterPonto(tipo) {
             const form = document.getElementById('pontoForm');
             const funcionario_id = form.funcionario_id.value;
 
             const data = { funcionario_id };
 
             fetch(`/ponto/${tipo}`, {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json'
                 },
                 body: JSON.stringify(data)
             })
             .then(response => response.json())
             .then(result => showMessage(result.message))
             .catch(error => showMessage(error.message, 'error'));
         }
 
         function gerarRelatorio() {
            const funcionario_id = document.querySelector('#funcionario_id_relatorio').value;
            const data_inicio = document.querySelector('#data_inicio').value;
            const data_fim = document.querySelector('#data_fim').value;
            console.log('Funcionario ID:', funcionario_id, 'Data Início:', data_inicio, 'Data Fim:', data_fim);
            fetch(`/relatorio?funcionario_id=${funcionario_id}&data_inicio=${data_inicio}&data_fim=${data_fim}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erro ao obter o relatório');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.message) {
                        alert(data.message); 
                    } else {
                        exibirRelatorio(data); 
                    }
                })
                .catch(error => {
                    console.error('Erro ao gerar relatório:', error);
                });
        }

        function exibirRelatorio(dados) {
            console.log("Exibindo relatório:", dados);
            const tabelaRelatorio = document.querySelector('#tabelaRelatorio tbody');
            tabelaRelatorio.innerHTML = '';
        
            // Função para formatar as horas e minutos
            function formatarHorasEMinutos(minutosTotais) {
                const horas = Math.floor(Math.abs(minutosTotais) / 60);
                const minutos = Math.abs(minutosTotais % 60);
                const sinal = minutosTotais < 0 ? '-' : '';
                return `${sinal}${horas}h ${minutos}m`;
            }
        
            // Função para ajustar o horário, ignorando os segundos
            function ajustarHorario(horario) {
                const [hora, minuto] = horario.split(':').map(Number);
                return [hora, minuto];
            }
        
            let saldoTotalMinutos = 0;
        
            dados.pontos.forEach(ponto => {
                let horasTrabalhadas = 0;
        
                const [horaEntrada, minutoEntrada] = ajustarHorario(ponto.entrada);
                const [horaSaida, minutoSaida] = ajustarHorario(ponto.saida);
        
                const entradaEmMinutos = horaEntrada * 60 + minutoEntrada;
                const saidaEmMinutos = horaSaida * 60 + minutoSaida;
        
                if (ponto.saida_almoco && ponto.volta_almoco) {
                    const [horaSaidaAlmoco, minutoSaidaAlmoco] = ajustarHorario(ponto.saida_almoco);
                    const [horaVoltaAlmoco, minutoVoltaAlmoco] = ajustarHorario(ponto.volta_almoco);
        
                    const saidaAlmocoEmMinutos = horaSaidaAlmoco * 60 + minutoSaidaAlmoco;
                    const voltaAlmocoEmMinutos = horaVoltaAlmoco * 60 + minutoVoltaAlmoco;
        
                    // Período antes do almoço
                    horasTrabalhadas += saidaAlmocoEmMinutos - entradaEmMinutos;
        
                    // Período após o almoço
                    horasTrabalhadas += saidaEmMinutos - voltaAlmocoEmMinutos;
                } else {
                    // Cálculo direto entre entrada e saída
                    horasTrabalhadas = saidaEmMinutos - entradaEmMinutos;
                }
        
                // Saldo do dia
                const saldoDiario = horasTrabalhadas - 440; // Considerando 8 horas = 480 minutos
                saldoTotalMinutos += saldoDiario;
        
                // Criação da linha na tabela
                const linha = document.createElement('tr');
                linha.innerHTML = `
                    <td>${ponto.data}</td>
                    <td>${ponto.entrada || 'N/A'}</td>
                    <td>${ponto.saida_almoco || 'N/A'}</td>
                    <td>${ponto.volta_almoco || 'N/A'}</td>
                    <td>${ponto.saida || 'N/A'}</td>
                    <td>${formatarHorasEMinutos(horasTrabalhadas)}</td>
                    <td>${formatarHorasEMinutos(saldoDiario)}</td>
                `;
                tabelaRelatorio.appendChild(linha);
            });
        
            // Saldo total
            const saldoTotalFormatado = formatarHorasEMinutos(saldoTotalMinutos);
            console.log("Saldo total", saldoTotalFormatado);
        
            const linhaSaldoTotal = document.createElement('tr');
            const classeSaldo = saldoTotalMinutos >= 0 ? 'saldo-positivo' : 'saldo-negativo';
        
            linhaSaldoTotal.innerHTML = `
                <td colspan="6"><strong>Saldo Total</strong></td>
                <td class="${classeSaldo}"><strong>${saldoTotalFormatado}</strong></td>
            `;
            tabelaRelatorio.appendChild(linhaSaldoTotal);
        }
        

        function exportarRelatorioParaCSV() {
            const tabela = document.querySelector('#tabelaRelatorio');
            let csvContent = '';
            
            // Extrair cabeçalho
            const headers = Array.from(tabela.querySelectorAll('thead th')).map(th => th.textContent).join(',');
            csvContent += headers + '\n';
            
            // Extrair linhas de dados
            const linhas = Array.from(tabela.querySelectorAll('tbody tr'));
            linhas.forEach(linha => {
                const cols = Array.from(linha.querySelectorAll('td')).map(td => td.textContent.trim()).join(',');
                csvContent += cols + '\n';
            });
            
            // Criar arquivo Blob e iniciar download
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', 'relatorio.csv');
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }        

       
        function exportarRelatorio() {
            const funcionarioId = document.getElementById('funcionario_id_relatorio').value;
            const dataInicio = document.getElementById('data_inicio').value;
            const dataFim = document.getElementById('data_fim').value;
    
            const url = `/relatorio/exportar?funcionario_id=${funcionarioId}&data_inicio=${dataInicio}&data_fim=${dataFim}`;
            window.location.href = url; // Redireciona para o endpoint de exportação
        }
         function cadastrarFuncionario() {
            const form = document.getElementById('cadastroFuncionarioForm');
            
            // Cria um objeto com os dados do formulário
            const data = {
                nome: form.nome.value,
                email: form.email.value,
                senha: form.senha.value,
                codigo: form.codigo.value,
                carga: form.carga.value
            };
        console.log("dados", data);
            fetch('/funcionarios/cadastrar', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.text())
             .then(result => showMessage(result.message))
             .catch(error => showMessage(error.message, 'error'));
             alert("Funcionario cadastrado com sucesso");
             window.location.reload();
        }
         
 
        function editarPonto() {
            const form = document.getElementById('editarPontoForm');
            const funcionario_id = form.funcionario_id_editar.value;
            const data = form.data_editar.value;
            const entrada = form.entrada_editar.value;
            const saida_almoco = form.saida_almoco_editar.value;
            const volta_almoco = form.volta_almoco_editar.value;
            const saida = form.saida_editar.value;
        
            const dados = {
                funcionario_id,
                data,
                entrada,
                saida_almoco,
                volta_almoco,
                saida
            };
        
            fetch(`/ponto/editar`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dados)
            })
            .then(response => response.text())
            .then(result => alert(result))
            .catch(error => console.error('Erro ao editar ponto:', error));
        }
        window.onload = function() {
            if (localStorage.getItem('autenticado') === 'true') {
                document.getElementById('loginDiv').style.display = 'none';  // Esconde a tela de login
                document.getElementById('conteudoProtegido').style.display = 'block';  // Mostra o conteúdo protegido
            }
        }
        function verificar() {
            var conteudo = document.getElementById('conteudoProteted');
            
            // Alterna a visibilidade
            if (conteudo.style.display === 'none') {
                conteudo.style.display = 'block';  // Mostra o conteúdo
            } else {
                conteudo.style.display = 'none';   // Esconde o conteúdo
            }
        }
        document.getElementById('logoutButton').addEventListener('click', () => {
            setTimeout(() => {
                window.location.href = '/logout';
            }, 3000); // 3000 ms = 3 segundos        
        });
      
        function verificar() {
            var conteudo = document.getElementById('conteudoProteted');
            if (conteudo.style.display === 'none') {
                conteudo.style.display = 'block';
            } else {
                conteudo.style.display = 'none';
            }
        }
    
        function verificarSenha() {
            const senha = document.getElementById('senha_login').value;
            
            // Envia a senha para o backend
            fetch('/verificar-senha', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ senha: senha })  // Envia a senha como JSON
            })
            .then(response => response.json())
            .then(data => {
                if (data.autenticado) {
                    // Armazena no Local Storage que o usuário autenticou
                    localStorage.setItem('autenticado', 'true');
    
                    // Esconde a tela de login e mostra o conteúdo protegido
                    document.getElementById('loginForm').style.display = 'none';
                    document.getElementById('conteudoProtegido').style.display = 'block';
                } else {
                    alert('Senha incorreta!');
                }
            })
            .catch(error => {
                console.error('Erro ao verificar a senha:', error);
            });
        }
        
        
    
        function fecharSessao() {
            // Remove a autenticação do Local Storage e volta para a tela de login
            localStorage.removeItem('autenticado');
            document.getElementById('loginDiv').style.display = 'block';  // Mostra a tela de login
            document.getElementById('conteudoProtegido').style.display = 'none';  
            window.location.reload();
        }
        
        async function buscarFuncionarios() {
            try {
                const response = await fetch('/buscar'); // Faz a requisição para a rota '/buscar'
                if (!response.ok) {
                    throw new Error('Erro ao buscar os funcionários');
                }
                const funcionarioslista = await response.json(); // Converte a resposta para JSON
                
                // Seleciona o elemento <ul> onde os funcionários serão listados
                const lista = document.getElementById('funcionarios-list');
                
                // Limpa a lista antes de adicionar os novos itens
                lista.innerHTML = '';
        
                // Verifique se "funcionarios" tem a estrutura correta
                funcionarioslista.forEach(funcionario1 => {
                    const listItem = document.createElement('li');
                    listItem.textContent = `${funcionario1.id}: ${funcionario1.nome}`;
                    lista.appendChild(listItem);
                });
            } catch (error) {
                console.error(error);                
            }
        }
        
        // Chama a função ao carregar a página
        window.onload = buscarFuncionarios;

        async function buscarRegistroParaEditar() {
            const form = document.getElementById('editarPontoForm');
            const funcionario_id = form.funcionario_id_editar.value;
            const data = form.data_editar.value;
        
            if (!funcionario_id || !data) {
                alert('Por favor, selecione um funcionário e uma data');
                return;
            }
        
            try {
                const response = await fetch(`/ponto/buscar?funcionario_id=${funcionario_id}&data=${data}`);
                if (response.ok) {
                    const registro = await response.json();
        
                    // Preenche os campos do formulário com os dados retornados
                    form.entrada_editar.value = registro.entrada || '';
                    form.saida_almoco_editar.value = registro.saida_almoco || '';
                    form.volta_almoco_editar.value = registro.volta_almoco || '';
                    form.saida_editar.value = registro.saida || '';
                } else if (response.status === 404) {
                    alert('Registro não encontrado para essa data');
                    form.reset(); // Reseta os campos do formulário se nenhum registro for encontrado
                } else {
                    throw new Error('Erro ao buscar registro');
                }
            } catch (error) {
                console.error('Erro ao buscar registro:', error);
                alert('Não foi possível buscar o registro. Tente novamente mais tarde.');
            }
        }
     </script>
 </body>
 </html>
